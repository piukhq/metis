import settings
import json
import time
import hmac
import hashlib
import base64
import requests
import uuid
from urllib import parse
from datetime import datetime

'''E2: https://api.qa.americanexpress.com/v2/datapartnership/offers/sync
E3: https://apigateway.americanexpress.com/v2/datapartnership/offers/sync'''
'''Amex use sync to add cards and unsync to remove cards from transactions output'''

testing_receiver_token = 'BqfFb1WnOwpbzH7WVTqmvYtffPV'
resPath = parse.quote("/v3/smartoffers/sync", safe='')
host = "api.qa.americanexpress.com"
port = "443"
testing_create_url = 'https://api.qa.americanexpress.com/v2/datapartnership/offers/sync'
testing_remove_url = 'https://api.qa.americanexpress.com/v2/datapartnership/offers/unsync'
production_receiver_token = 'ZQLPEvBP4jaaYhxHDl7SWobMXDt'
# production_create_url = 'https://apigateway.americanexpress.com/v2/datapartnership/offers/sync'
# production_create_url = 'https://api.qa.americanexpress.com/v2/datapartnership/offers/sync'
production_create_url = 'https://api.qa.americanexpress.com/v3/smartoffers/sync'

# Amex OAuth details
client_id = "e0e1114e-b63d-4e72-882b-29ad364573ac"
client_secret = "a44bfb98-239c-4ac0-85ae-685ed110e3af"


class Amex:
    def url(self):
        if not settings.TESTING:
            service_url = production_create_url
        else:
            service_url = testing_create_url
        return service_url

    def receiver_token(self):
        if not settings.TESTING:
            receiver_token = production_receiver_token
        else:
            receiver_token = testing_receiver_token
        return receiver_token

    def request_header(self):
        header_start = '<![CDATA['
        content_type = 'Content-Type: application/json'
        auth_header = mac_auth_header()
        oauth_resp = self.amex_oauth(auth_header)

        access_token = oauth_resp['access_token']
        mac_key = oauth_resp['mac_key']
        mac_header = mac_api_header(access_token, mac_key)
        authentication = 'Authorization: ' + "\"" + mac_header + "\""

        api_key = 'X-AMEX-API-KEY: {}'.format(client_id)
        access_key = 'X-AMEX-ACCESS-KEY: {}'.format(access_token)
        header_end = ']]>'

        header = "{0} {1}\n {2}\n {3}\n {4}\n {5}".format(header_start, content_type, authentication,
                                                          api_key, access_key, header_end)
        return header

    def request_body(self, card_ids):
        msgId = time.mktime(datetime.now().timetuple())  # 'Can this be a guid or similar?'
        partnerId = 'AADP0050'  # 'Amex to provide'
        distrChan = '9999'  # 'Amex to provide'

        data = {
            "msgId": msgId,
            "partnerId": partnerId,
            "cardNbr": "{{credit_card_number}}",
            "cmAlias1": card_ids[0],
            "distrChan": distrChan
        }
        # Todo - check if "langCd": "en", "ctryCd": "US", required

        body_data = '<![CDATA[' + json.dumps(data) + ']]>'
        return body_data

    def amex_oauth(self, auth_header):
        # Call the Amex OAuth endpoint to obtain an API request token.
        base_url = "https://api.qa.americanexpress.com"
        auth_url = base_url + "/apiplatform/v2/oauth/token/mac"
        # payload = "grant_type=client_credentials&app_spec_info=Apigee&guid_type=privateguid&scope=ThanxSmartOffers_"
        payload = "grant_type=client_credentials&scope="

        header = {"Content-Type": "application/x-www-form-urlencoded",
                  "Authentication": auth_header,
                  "X-AMEX-API-KEY": client_id}

        resp = requests.post(auth_url, data=payload, headers=header)
        resp_json = json.loads(resp.content.decode())
        if resp.status_code == 200:
            return resp_json
        else:
            return None


def mac_auth_header():
    """
    Authentication=”MAC id=” client id value”,
    ts=”time stamp generated by client(In unix epoch time format)”,
    nonce=”unique identifier string”,
    mac=”request MAC generated using HMAC SHA1 algorithm”
    i. Use HMAC SHA1 algorithm.
    ii. Base string constructed using below parameters with following order followed by newline
        a.  client_id
        b. ts (timestamp in unix epoch format)
        c. nonce
        d. grant_type
    iii. Use client_secret as key.
    iv. Base 64 encoding on output raw data
    :return: mac token.
    """
    secret_key = client_secret.encode('utf-8')
    ts = str(int(time.time()))
    nonce = ts + ":BINK"
    base_string = client_id + "\n" + ts + "\n" + nonce + "\n" + "client_credentials" + "\n"
    base_string_bytes = base_string.encode('utf-8')
    mac = generate_mac(base_string_bytes, secret_key)

    auth_header = "MAC id=\"" + client_id + "\",ts=\"" + ts + "\",nonce=\"" + nonce + "\",mac=\"" + mac + "\""

    return auth_header


def mac_api_header(access_token, mac_key):
    """
    Authentication=”MAC id=” client id value”,
    ts=”time stamp generated by client(In unix epoch time format)”,
    nonce=”unique identifier string”,
    mac=”request MAC generated using HMAC SHA1 algorithm”
    i. Use HMAC SHA1 algorithm.
    ii. Base string constructed using below parameters with following order followed by newline
        a.  ts - timestamp
        b. nonce = ts:BINK
        c. HTTP Method = POST
        d. Resource path = '/v1/apis/getme' url encoded
        e. host = 'api.qa.americanexpress.com'
        f. post : 443
    iii. Use OAuth token as key.
    iv. Base 64 encoding on output raw data
    :return: mac token.
    """
    secret_key = mac_key.encode('utf-8')
    ts = str(int(time.time()))
    nonce = ts + ":BINK"
    base_string = ts+"\n"+nonce+"\n"+"POST\n"+resPath+"\n"+host+"\n"+port+"\n"
    base_string_bytes = base_string.encode('utf-8')
    mac = generate_mac(base_string_bytes, secret_key)

    auth_header = "MAC id=\"" + access_token + "\",ts=\"" + ts + "\",nonce=\"" + nonce + "\",mac=\"" + mac + "\""

    return auth_header


def generate_mac(encoded_base_string, secret_key):

    dig = hmac.new(secret_key, msg=encoded_base_string, digestmod=hashlib.sha256).digest()
    mac = str(base64.b64encode(dig), 'utf-8')
    return mac
